// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BTD6Map {
  id         String @id @default(cuid())
  name       String
  code       String @unique
  difficulty String

  challenges  Challenge[]
  submissions Submission[]
}

model GameType {
  id         String @id @default(cuid())
  name       String
  code       String @unique
  difficulty String

  challenges  Challenge[]
  submissions Submission[]
}

model Hero {
  id   String @id @default(cuid())
  name String
  code String @unique

  submissions Submission[] @relation("SubmissionHeroes")
}

model Challenge {
  id        String     @id @default(cuid())
  name      String
  code      String     @unique
  btd6Maps  BTD6Map[]
  gameTypes GameType[]

  Submission Submission[] @relation("SubmissionChallenges")
}

model Submission {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  btd6Map         BTD6Map     @relation(fields: [btd6MapId], references: [id])
  btd6MapId       String
  gameType        GameType    @relation(fields: [gameTypeId], references: [id])
  gameTypeId      String
  heroes          Hero[]      @relation("SubmissionHeroes")
  version         String
  challenges      Challenge[] @relation("SubmissionChallenges")
  highestRound    Int
  players         Int         @default(1)
  seed            Int?
  mediaLink       String?
  screenshotPath  String?
  saveFilePath    String?
  additionalNotes String
  verified        Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([btd6MapId, gameTypeId, highestRound])
  @@index([userId])
  @@index([createdAt])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean      @default(false)
  verifier      Boolean      @default(false)
  submissions   Submission[]
  accounts      Account[]
  sessions      Session[]
}

// Add these if missing (NextAuth required models)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
